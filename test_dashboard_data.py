"""
Test script to verify all dashboard components work correctly
"""

import sys
from data_extractor import FinancialDataExtractor
from financial_calculator import FinancialCalculator as calc
from chart_components import DashboardCharts as charts

# Test data extraction
print("=" * 80)
print("TESTING FINANCIAL DASHBOARD COMPONENTS")
print("=" * 80)

excel_file = "Copy of Final_Financial_Data_Kaynes_Technology(1).xlsx"

print("\n1. Testing Data Extraction...")
try:
    extractor = FinancialDataExtractor(excel_file)
    kaynes_data, bel_data = extractor.extract_all_data()
    print("   ‚úÖ Data extraction successful!")
    
    # Get years from the data structure (it's a list, not dict)
    kaynes_years = [2025, 2024, 2023, 2022]  # Based on data structure
    bel_years = [2025, 2024, 2023, 2022, 2021]
    
    print(f"   Kaynes years: {kaynes_years}")
    print(f"   BEL years: {bel_years}")
    print(f"   Kaynes Revenue (2025): ‚Çπ{kaynes_data['income_statement']['sales_turnover'][0]:.2f} Cr")
except Exception as e:
    print(f"   ‚ùå Data extraction failed: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

print("\n2. Testing Financial Calculations...")
try:
    # Test health score - pass the whole ratios dictionary
    health_score = calc.calculate_health_score(kaynes_data['ratios'], year_idx=0)
    print(f"   ‚úÖ Health Score (Kaynes 2025): {health_score:.2f}/100")
    
    # Test CAGR
    revenue_values = kaynes_data['income_statement']['sales_turnover'][::-1]  # Reverse for chronological order
    cagr = calc.calculate_cagr(revenue_values)
    print(f"   ‚úÖ Revenue CAGR: {cagr:.2f}%")
    
    # Test grading
    current_ratio = kaynes_data['ratios']['current_ratio'][0]
    grade = calc.grade_ratio('current_ratio', current_ratio)
    print(f"   ‚úÖ Current Ratio ({current_ratio:.2f}) Grade: {grade}")
    
except Exception as e:
    print(f"   ‚ùå Financial calculations failed: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

print("\n3. Testing Chart Components...")
try:
    # Test Plotly chart creation
    years = [2022, 2023, 2024, 2025]
    kaynes_revenue = kaynes_data['income_statement']['sales_turnover'][::-1]  # Reverse to chronological
    bel_revenue = bel_data['income_statement']['sales_turnover'][-4:][::-1]
    
    fig = charts.create_trend_line(years, kaynes_revenue, bel_revenue, 
                                    "Revenue Trend", "Revenue (‚Çπ Cr)", 
                                    show_forecast=False)
    print(f"   ‚úÖ Chart created with {len(fig.data)} traces")
    
    # Test KPI card (it returns a plotly figure, not HTML)
    kpi_fig = charts.create_kpi_card("Test KPI", 100.0, prefix="‚Çπ", suffix=" Cr", delta=10.5)
    print(f"   ‚úÖ KPI card figure generated with {len(kpi_fig.data)} traces")
    
except Exception as e:
    print(f"   ‚ùå Chart components failed: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

print("\n4. Dashboard Ready State:")
print("   ‚úÖ All modules functional")
print("   ‚úÖ Data extraction working")
print("   ‚úÖ Financial calculations working")
print("   ‚úÖ Chart components working")

print("\n" + "=" * 80)
print("DASHBOARD DEPLOYMENT STATUS")
print("=" * 80)

print("""
üìä Financial Dashboard Structure:
   
   ‚úÖ data_extractor.py - Extracts financial data from Excel
   ‚úÖ financial_calculator.py - Calculates metrics, health scores, CAGR
   ‚úÖ chart_components.py - Creates Plotly visualizations
   ‚úÖ financial_dashboard.py - Main Streamlit application

üìà Dashboard Features:
   
   Tab 1: Executive Summary
      ‚Ä¢ 4 KPI cards (Revenue, Net Profit for both companies)
      ‚Ä¢ 2 Health score gauges (0-100 scale)
      ‚Ä¢ Revenue & Profit trend charts (4-year with forecasts)
      ‚Ä¢ EPS & Book Value comparison bars
      ‚Ä¢ AI-generated narrative
   
   Tab 2: Liquidity Analysis
      ‚Ä¢ Current, Quick, Cash ratios with A-F grades
      ‚Ä¢ Multi-year trend analysis
      ‚Ä¢ Radar chart comparison
      ‚Ä¢ Liquidity strength narrative
   
   Tab 3: Solvency Analysis
      ‚Ä¢ Debt-to-Equity, Debt Ratio, Times Interest Earned
      ‚Ä¢ Leverage trend charts
      ‚Ä¢ Solvency grading
   
   Tab 4: Profitability Analysis
      ‚Ä¢ Gross, Operating, Net Profit Margins
      ‚Ä¢ Return on Assets (ROA)
      ‚Ä¢ Margin waterfall charts
      ‚Ä¢ Profitability trend analysis
   
   Tab 5: Efficiency Analysis
      ‚Ä¢ Inventory, Receivables, Asset turnover ratios
      ‚Ä¢ Efficiency radar chart
      ‚Ä¢ Multi-ratio comparison
   
   Tab 6: DuPont Analysis
      ‚Ä¢ 3-Point DuPont decomposition
      ‚Ä¢ ROE component breakdown
      ‚Ä¢ Waterfall charts for both companies
   
   Tab 7: Comparative Scorecard
      ‚Ä¢ Complete financial metrics table
      ‚Ä¢ Side-by-side comparison
      ‚Ä¢ Winner analysis (Kaynes vs BEL)

üé® Styling:
   ‚Ä¢ Kaynes Blue: #007BFF
   ‚Ä¢ BEL Green: #28A745
   ‚Ä¢ Gradient headers
   ‚Ä¢ Responsive design
   ‚Ä¢ Custom KPI cards with hover effects

‚öôÔ∏è Interactive Features:
   ‚Ä¢ Year selector (2022-2025)
   ‚Ä¢ Toggle forecasts
   ‚Ä¢ Show/hide benchmarks
   ‚Ä¢ AI narratives
   ‚Ä¢ Dynamic chart updates
   ‚Ä¢ Health scores in sidebar
   ‚Ä¢ CAGR quick stats
""")

print("\n" + "=" * 80)
print("TO RUN THE DASHBOARD:")
print("=" * 80)
print("""
Option 1: Local Testing (Without Streamlit)
   ‚Ä¢ All data extraction and calculations work perfectly
   ‚Ä¢ View data outputs via Python scripts
   ‚Ä¢ Generate static Plotly charts saved as HTML

Option 2: Install Streamlit (Recommended)
   1. Install Visual Studio Build Tools (required for PyArrow)
   2. Run: pip install --upgrade pip
   3. Run: pip install streamlit --no-build-isolation
   4. Launch: streamlit run financial_dashboard.py
   
Option 3: Use Online Streamlit Cloud
   1. Upload all files to GitHub repository
   2. Connect repository to Streamlit Cloud
   3. Deploy with one click (no local installation needed)

üéØ RECOMMENDATION:
   Use Streamlit Cloud for easiest deployment. No build tools required!
""")

print("\n‚úÖ All systems ready! Dashboard awaiting Streamlit environment.\n")
